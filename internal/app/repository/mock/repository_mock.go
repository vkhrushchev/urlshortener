// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\app\repository\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vkhrushchev/urlshortener/internal/app/entity"
)

// MockIShortURLRepository is a mock of IShortURLRepository interface.
type MockIShortURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIShortURLRepositoryMockRecorder
}

// MockIShortURLRepositoryMockRecorder is the mock recorder for MockIShortURLRepository.
type MockIShortURLRepositoryMockRecorder struct {
	mock *MockIShortURLRepository
}

// NewMockIShortURLRepository creates a new mock instance.
func NewMockIShortURLRepository(ctrl *gomock.Controller) *MockIShortURLRepository {
	mock := &MockIShortURLRepository{ctrl: ctrl}
	mock.recorder = &MockIShortURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShortURLRepository) EXPECT() *MockIShortURLRepositoryMockRecorder {
	return m.recorder
}

// DeleteShortURLsByShortURIs mocks base method.
func (m *MockIShortURLRepository) DeleteShortURLsByShortURIs(ctx context.Context, shortURIs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURLsByShortURIs", ctx, shortURIs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURLsByShortURIs indicates an expected call of DeleteShortURLsByShortURIs.
func (mr *MockIShortURLRepositoryMockRecorder) DeleteShortURLsByShortURIs(ctx, shortURIs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURLsByShortURIs", reflect.TypeOf((*MockIShortURLRepository)(nil).DeleteShortURLsByShortURIs), ctx, shortURIs)
}

// GetShortURLByShortURI mocks base method.
func (m *MockIShortURLRepository) GetShortURLByShortURI(ctx context.Context, shortURI string) (entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByShortURI", ctx, shortURI)
	ret0, _ := ret[0].(entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByShortURI indicates an expected call of GetShortURLByShortURI.
func (mr *MockIShortURLRepositoryMockRecorder) GetShortURLByShortURI(ctx, shortURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByShortURI", reflect.TypeOf((*MockIShortURLRepository)(nil).GetShortURLByShortURI), ctx, shortURI)
}

// GetShortURLsByUserID mocks base method.
func (m *MockIShortURLRepository) GetShortURLsByUserID(ctx context.Context, userID string) ([]entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLsByUserID indicates an expected call of GetShortURLsByUserID.
func (mr *MockIShortURLRepositoryMockRecorder) GetShortURLsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLsByUserID", reflect.TypeOf((*MockIShortURLRepository)(nil).GetShortURLsByUserID), ctx, userID)
}

// GetStats mocks base method.
func (m *MockIShortURLRepository) GetStats(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockIShortURLRepositoryMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockIShortURLRepository)(nil).GetStats), ctx)
}

// SaveShortURL mocks base method.
func (m *MockIShortURLRepository) SaveShortURL(ctx context.Context, shortURLEntity *entity.ShortURLEntity) (*entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", ctx, shortURLEntity)
	ret0, _ := ret[0].(*entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockIShortURLRepositoryMockRecorder) SaveShortURL(ctx, shortURLEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*MockIShortURLRepository)(nil).SaveShortURL), ctx, shortURLEntity)
}

// SaveShortURLs mocks base method.
func (m *MockIShortURLRepository) SaveShortURLs(ctx context.Context, shortURLEntities []entity.ShortURLEntity) ([]entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURLs", ctx, shortURLEntities)
	ret0, _ := ret[0].([]entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURLs indicates an expected call of SaveShortURLs.
func (mr *MockIShortURLRepositoryMockRecorder) SaveShortURLs(ctx, shortURLEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURLs", reflect.TypeOf((*MockIShortURLRepository)(nil).SaveShortURLs), ctx, shortURLEntities)
}
