// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vkhrushchev/urlshortener/internal/app/entity"
)

// MockshortURLRepository is a mock of shortURLRepository interface.
type MockshortURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockshortURLRepositoryMockRecorder
}

// MockshortURLRepositoryMockRecorder is the mock recorder for MockshortURLRepository.
type MockshortURLRepositoryMockRecorder struct {
	mock *MockshortURLRepository
}

// NewMockshortURLRepository creates a new mock instance.
func NewMockshortURLRepository(ctrl *gomock.Controller) *MockshortURLRepository {
	mock := &MockshortURLRepository{ctrl: ctrl}
	mock.recorder = &MockshortURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshortURLRepository) EXPECT() *MockshortURLRepositoryMockRecorder {
	return m.recorder
}

// DeleteShortURLsByShortURIs mocks base method.
func (m *MockshortURLRepository) DeleteShortURLsByShortURIs(ctx context.Context, shortURIs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURLsByShortURIs", ctx, shortURIs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURLsByShortURIs indicates an expected call of DeleteShortURLsByShortURIs.
func (mr *MockshortURLRepositoryMockRecorder) DeleteShortURLsByShortURIs(ctx, shortURIs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURLsByShortURIs", reflect.TypeOf((*MockshortURLRepository)(nil).DeleteShortURLsByShortURIs), ctx, shortURIs)
}

// GetShortURLByShortURI mocks base method.
func (m *MockshortURLRepository) GetShortURLByShortURI(ctx context.Context, shortURI string) (entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByShortURI", ctx, shortURI)
	ret0, _ := ret[0].(entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByShortURI indicates an expected call of GetShortURLByShortURI.
func (mr *MockshortURLRepositoryMockRecorder) GetShortURLByShortURI(ctx, shortURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByShortURI", reflect.TypeOf((*MockshortURLRepository)(nil).GetShortURLByShortURI), ctx, shortURI)
}

// GetShortURLsByUserID mocks base method.
func (m *MockshortURLRepository) GetShortURLsByUserID(ctx context.Context, userID string) ([]entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLsByUserID indicates an expected call of GetShortURLsByUserID.
func (mr *MockshortURLRepositoryMockRecorder) GetShortURLsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLsByUserID", reflect.TypeOf((*MockshortURLRepository)(nil).GetShortURLsByUserID), ctx, userID)
}

// SaveShortURL mocks base method.
func (m *MockshortURLRepository) SaveShortURL(ctx context.Context, shortURLEntity *entity.ShortURLEntity) (*entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", ctx, shortURLEntity)
	ret0, _ := ret[0].(*entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockshortURLRepositoryMockRecorder) SaveShortURL(ctx, shortURLEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*MockshortURLRepository)(nil).SaveShortURL), ctx, shortURLEntity)
}

// SaveShortURLs mocks base method.
func (m *MockshortURLRepository) SaveShortURLs(ctx context.Context, shortURLEntities []entity.ShortURLEntity) ([]entity.ShortURLEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURLs", ctx, shortURLEntities)
	ret0, _ := ret[0].([]entity.ShortURLEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURLs indicates an expected call of SaveShortURLs.
func (mr *MockshortURLRepositoryMockRecorder) SaveShortURLs(ctx, shortURLEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURLs", reflect.TypeOf((*MockshortURLRepository)(nil).SaveShortURLs), ctx, shortURLEntities)
}

// MockstatsRepository is a mock of statsRepository interface.
type MockstatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockstatsRepositoryMockRecorder
}

// MockstatsRepositoryMockRecorder is the mock recorder for MockstatsRepository.
type MockstatsRepositoryMockRecorder struct {
	mock *MockstatsRepository
}

// NewMockstatsRepository creates a new mock instance.
func NewMockstatsRepository(ctrl *gomock.Controller) *MockstatsRepository {
	mock := &MockstatsRepository{ctrl: ctrl}
	mock.recorder = &MockstatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstatsRepository) EXPECT() *MockstatsRepositoryMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockstatsRepository) GetStats(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockstatsRepositoryMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockstatsRepository)(nil).GetStats), ctx)
}
